{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0fd13550-fd6f-4a9a-af5c-c90288e8cdfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4ef6d23d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          CODUSU  ANO4  TRIMESTRE  NRO_HOGAR  COMPONENTE  H15  \\\n",
      "0  TQRMNOSUWHLMKQCDEFNFF00852219  2023          4          1           1    1   \n",
      "1  TQRMNOSUWHLMKQCDEFNFF00852219  2023          4          1           2    1   \n",
      "2  TQRMNOTXQHKOLMCDEGNFJ00794590  2023          4          1           1    1   \n",
      "3  TQRMNOTXQHKOLMCDEGNFJ00794590  2023          4          1           2    1   \n",
      "4  TQRMNOTXQHKOLMCDEGNFJ00794590  2023          4          1           3    0   \n",
      "\n",
      "   REGION MAS_500  AGLOMERADO  PONDERA  ...  PDECIFR  ADECIFR       IPCF  \\\n",
      "0      41       N           7      370  ...     12.0       12       0.00   \n",
      "1      41       N           7      370  ...     12.0       12       0.00   \n",
      "2      44       N          17      281  ...      9.0        7  216666.67   \n",
      "3      44       N          17      281  ...      9.0        7  216666.67   \n",
      "4      44       N          17      281  ...      9.0        7  216666.67   \n",
      "\n",
      "   DECCFR  IDECCFR  RDECCFR  GDECCFR  PDECCFR  ADECCFR  PONDIH  \n",
      "0      12     12.0       12      NaN     12.0       12       0  \n",
      "1      12     12.0       12      NaN     12.0       12       0  \n",
      "2       8      8.0        7      NaN      8.0        6     387  \n",
      "3       8      8.0        7      NaN      8.0        6     387  \n",
      "4       8      8.0        7      NaN      8.0        6     387  \n",
      "\n",
      "[5 rows x 177 columns]\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "\n",
    "# URL del archivo Excel en GitHub\n",
    "url = 'https://github.com/Ninadcp/BIGDATA/raw/29365bf058de109fcd696c339c3caad132e0f592/tp3/usu_individual_T423.xlsx'\n",
    "\n",
    "# Leer el archivo Excel usando pandas\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Mostrar las primeras filas del DataFrame para verificar\n",
    "print(df.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e6c81e46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ANO4</th>\n",
       "      <th>TRIMESTRE</th>\n",
       "      <th>NRO_HOGAR</th>\n",
       "      <th>COMPONENTE</th>\n",
       "      <th>H15</th>\n",
       "      <th>REGION</th>\n",
       "      <th>AGLOMERADO</th>\n",
       "      <th>PONDERA</th>\n",
       "      <th>CH03</th>\n",
       "      <th>CH04</th>\n",
       "      <th>...</th>\n",
       "      <th>PDECIFR</th>\n",
       "      <th>ADECIFR</th>\n",
       "      <th>IPCF</th>\n",
       "      <th>DECCFR</th>\n",
       "      <th>IDECCFR</th>\n",
       "      <th>RDECCFR</th>\n",
       "      <th>GDECCFR</th>\n",
       "      <th>PDECCFR</th>\n",
       "      <th>ADECCFR</th>\n",
       "      <th>PONDIH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5969.0</td>\n",
       "      <td>5969.0</td>\n",
       "      <td>5969.000000</td>\n",
       "      <td>5969.000000</td>\n",
       "      <td>5969.000000</td>\n",
       "      <td>5969.0</td>\n",
       "      <td>5969.000000</td>\n",
       "      <td>5969.000000</td>\n",
       "      <td>5969.000000</td>\n",
       "      <td>5969.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5969.000000</td>\n",
       "      <td>5.969000e+03</td>\n",
       "      <td>5969.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5969.000000</td>\n",
       "      <td>5969.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5969.000000</td>\n",
       "      <td>5969.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2023.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.040543</td>\n",
       "      <td>2.443793</td>\n",
       "      <td>0.872005</td>\n",
       "      <td>1.0</td>\n",
       "      <td>32.790250</td>\n",
       "      <td>2184.709499</td>\n",
       "      <td>2.430725</td>\n",
       "      <td>1.537443</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.274920</td>\n",
       "      <td>1.285956e+05</td>\n",
       "      <td>6.996817</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.869995</td>\n",
       "      <td>6.952923</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.872675</td>\n",
       "      <td>2628.323840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.292261</td>\n",
       "      <td>1.548555</td>\n",
       "      <td>0.351703</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.407165</td>\n",
       "      <td>1127.237973</td>\n",
       "      <td>1.568777</td>\n",
       "      <td>0.498638</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.748008</td>\n",
       "      <td>1.724716e+05</td>\n",
       "      <td>3.915001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.949648</td>\n",
       "      <td>3.930269</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.939711</td>\n",
       "      <td>2340.187652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2023.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2023.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>1410.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2023.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>2076.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>8.833333e+04</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2372.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2023.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>2841.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>1.750000e+05</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>4209.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2023.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>8937.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>2.100000e+06</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>16756.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 172 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         ANO4  TRIMESTRE    NRO_HOGAR   COMPONENTE          H15  REGION  \\\n",
       "count  5969.0     5969.0  5969.000000  5969.000000  5969.000000  5969.0   \n",
       "mean   2023.0        4.0     1.040543     2.443793     0.872005     1.0   \n",
       "std       0.0        0.0     1.292261     1.548555     0.351703     0.0   \n",
       "min    2023.0        4.0     1.000000     1.000000     0.000000     1.0   \n",
       "25%    2023.0        4.0     1.000000     1.000000     1.000000     1.0   \n",
       "50%    2023.0        4.0     1.000000     2.000000     1.000000     1.0   \n",
       "75%    2023.0        4.0     1.000000     3.000000     1.000000     1.0   \n",
       "max    2023.0        4.0    71.000000    13.000000     2.000000     1.0   \n",
       "\n",
       "        AGLOMERADO      PONDERA         CH03         CH04  ...  PDECIFR  \\\n",
       "count  5969.000000  5969.000000  5969.000000  5969.000000  ...      0.0   \n",
       "mean     32.790250  2184.709499     2.430725     1.537443  ...      NaN   \n",
       "std       0.407165  1127.237973     1.568777     0.498638  ...      NaN   \n",
       "min      32.000000    34.000000     1.000000     1.000000  ...      NaN   \n",
       "25%      33.000000  1410.000000     1.000000     1.000000  ...      NaN   \n",
       "50%      33.000000  2076.000000     2.000000     2.000000  ...      NaN   \n",
       "75%      33.000000  2841.000000     3.000000     2.000000  ...      NaN   \n",
       "max      33.000000  8937.000000    10.000000     2.000000  ...      NaN   \n",
       "\n",
       "           ADECIFR          IPCF       DECCFR  IDECCFR      RDECCFR  \\\n",
       "count  5969.000000  5.969000e+03  5969.000000      0.0  5969.000000   \n",
       "mean      7.274920  1.285956e+05     6.996817      NaN     6.869995   \n",
       "std       3.748008  1.724716e+05     3.915001      NaN     3.949648   \n",
       "min       0.000000  0.000000e+00     0.000000      NaN     0.000000   \n",
       "25%       4.000000  0.000000e+00     3.000000      NaN     3.000000   \n",
       "50%       7.000000  8.833333e+04     7.000000      NaN     7.000000   \n",
       "75%      12.000000  1.750000e+05    12.000000      NaN    12.000000   \n",
       "max      12.000000  2.100000e+06    12.000000      NaN    12.000000   \n",
       "\n",
       "           GDECCFR  PDECCFR      ADECCFR        PONDIH  \n",
       "count  5969.000000      0.0  5969.000000   5969.000000  \n",
       "mean      6.952923      NaN     6.872675   2628.323840  \n",
       "std       3.930269      NaN     3.939711   2340.187652  \n",
       "min       0.000000      NaN     0.000000      0.000000  \n",
       "25%       3.000000      NaN     3.000000      0.000000  \n",
       "50%       7.000000      NaN     7.000000   2372.000000  \n",
       "75%      12.000000      NaN    12.000000   4209.000000  \n",
       "max      12.000000      NaN    12.000000  16756.000000  \n",
       "\n",
       "[8 rows x 172 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Filtramos las observaciones que corresponden a Ciudad Autónoma de Buenos Aires o Gran Buenos Aires, es decir me quiero quedar con AGLOMERADO==32(Ciudad de Buenos Aires) y AGLOMERADO== 33 (Partidos del GBA)\n",
    "df_filtrado = df[(df['AGLOMERADO'] == 32) | (df['AGLOMERADO'] == 33)]\n",
    "\n",
    "# Buscamos las filas que tienen valores numéricos\n",
    "columnas_numericas = df_filtrado.select_dtypes(include=[np.number]).columns.tolist()\n",
    "\n",
    "# Filtramos las filas que no tengan valores negativos en columnas numéricas\n",
    "df_filtrado2 = df_filtrado[~(df_filtrado[columnas_numericas] < 0).any(axis=1)]\n",
    "\n",
    "# Guardamos el DataFrame como archivo Excel\n",
    "df_filtrado2.to_excel('datos_filtrados.xlsx', index=False)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "493a01bd",
   "metadata": {},
   "source": [
    "### (C)\n",
    "Una vez hecha esa limpieza, realicen un gra ́fico de barras mostrando la composicio ́n por sexo. Comenten los resultados.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d42f352",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf3f91a9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "218601ff",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
